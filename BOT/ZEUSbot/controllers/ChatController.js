const NameLibrary = require("../variables/NameLibrary")
const Commands = require("../variables/Commands")
const keyboard = require("../variables/Keyboards")
const api = require("../middleware/API")
const SceneController = require("../controllers/SceneController")
const Data = require("../models/CacheData")
const {Player, PlayerStatus, PlayerInfo, Country, CountryRoads, CityRoads} = require("../database/Models");
const ErrorHandler = require("../error/ErrorHandler")

class ChatController
{
    async CommandHandler(context)
    {
        if(context.messagePayload)
        {
            await this.ChatButtonHandler(context)
            return
        }
        context.command?.match(/^–±–æ—Ç$/) && await context.reply(NameLibrary.GetRandomSample("call_request"))
        context.command?.match(Commands.botCall) && await context.reply(NameLibrary.GetRandomSample("dungeon_master_request"))
        context.command?.match(Commands.clearKeyboard) && await context.send("–£–±–∏—Ä–∞—é", {keyboard: keyboard.none})
        context.command?.match(Commands.badJoke) && await context.send(NameLibrary.GetRandomSample("bad_jokes"))
        context.command?.match(Commands.warning) && await this.SendWarningForm(context)
        context.command?.match(Commands.ban) && await this.SendBanForm(context)
        context.command?.match(Commands.resources) && await context.reply(context.player.GetResources())
        context.command?.match(Commands.location) && await this.LocationRequest(context)
        context.command?.match(Commands.aboutMe) && await context.reply(context.player.GetInfo())
        context.command?.match(Commands.checkLocation) && await this.CheckLocation(context)
        context.command?.match(Commands.checkDocs) && await this.CheckDocs(context)
        context.command?.match(Commands.send) && await this.SendResource(context)
        context.command?.match(Commands.relax) && await this.Relax(context)
        context.command?.match(Commands.wakeup) && await this.Wakeup(context)
        context.command?.match(/^–º–∏—Ä$/) && await context.send("üåç –¢–∞–∫–æ–≤ –Ω–∞—à –º–∏—Ä, –Ω–æ —á—Ç–æ —Å–º–æ—Ç—Ä–µ—Ç—å —Ç—ã —Ö–æ—á–µ—à—å?", {attachment: Data.variables.globalMap, keyboard: keyboard.build([[keyboard.greyButton({name: "üó∫ –ö–∞—Ä—Ç–∞ –¥–æ—Ä–æ–≥", type: "show_road_map"})]]).inline()})
        context.command?.match(Commands.map) && await this.RoadMap(context)
        context.command?.match(Commands.work) && await this.Work(context)
        context.command?.match(/^—Ä–µ—Å–µ—Ç$/) && await this.Reset(context)
        context.command?.match(/^–¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç/) && await this.AddCountryChat(context)
        context.command?.match(Commands.countries) && await this.ShowCountriesInfo(context)
        context.command?.match(Commands.countriesActive) && await this.ShowCountriesActive(context)
        context.command?.match(Commands.marry) && await this.OfferMarry(context)
        context.command?.match(Commands.divorce) && await this.Divorce(context)
        context.command?.match(Commands.stats) && await this.ShowPlayerActive(context)
    }

    async ChatButtonHandler(context)
    {
        context.messagePayload.type === "extract" && await this.ExtractResource(context, context.messagePayload.action)
        context.messagePayload.type === "show_road_map" && await this.RoadMap(context)
        context.messagePayload.type === "to_other_city" && await this.ToOtherCity(context, Data.ParseButtonID(context.messagePayload.action))
        context.messagePayload.type === "to_other_country" && await this.ToOtherCountry(context, Data.ParseButtonID(context.messagePayload.action))
    }

    async ShowPlayerActive(context)
    {
        try
        {
            if(context.replyPlayers?.length !== 0 && NameLibrary.RoleEstimator(context.player.role) === 0)
            {
                await context.reply("‚ö† –í—ã –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤")
                return
            }
            let activity = {
                allMessages: 0,
                allAudios: 0,
                allStickers: 0,
                allSwords: 0,
                todayMessages: 0,
                todayAudios: 0,
                todayStickers: 0,
                todaySwords: 0
            }
            if(context.replyPlayers?.length !== 0)
            {
                if(Data.users[context.replyPlayers[0]])
                {
                    if(Data.activity[context.replyPlayers[0]]) activity.todayMessages = Data.activity[context.replyPlayers[0]]
                    if(Data.musicLovers[context.replyPlayers[0]]) activity.todayAudios = Data.musicLovers[context.replyPlayers[0]]
                    if(Data.stickermans[context.replyPlayers[0]]) activity.todayStickers = Data.stickermans[context.replyPlayers[0]]
                    if(Data.uncultured[context.replyPlayers[0]]) activity.todaySwords = Data.uncultured[context.replyPlayers[0]]
                    activity.allMessages = Data.users[context.replyPlayers[0]].msgs + activity.todayMessages
                    activity.allAudios = Data.users[context.replyPlayers[0]].audios + activity.todayAudios
                    activity.allStickers = Data.users[context.replyPlayers[0]].stickers + activity.todayStickers
                    activity.allSwords = Data.users[context.replyPlayers[0]].swords + activity.todaySwords
                }
                else
                {
                    const user = await PlayerInfo.findOne({where: {id: context.replyPlayers[0]}})
                    if(!user)
                    {
                        await context.reply("‚ö† –ò–≥—Ä–æ–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                        await context.send(`‚ö† –ê *id${context.replyPlayers[0]}(–≤–∞—Å) —è –ø–æ–ø—Ä–æ—à—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –∏–Ω–∞—á–µ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞`)
                        return
                    }
                    activity.allMessages = user.dataValues.msgs
                    activity.allAudios = user.dataValues.audios
                    activity.allStickers = user.dataValues.stickers
                    activity.allSwords = user.dataValues.swords
                }
            }
            else
            {
                if(Data.activity[context.player.id]) activity.todayMessages = Data.activity[context.player.id]
                if(Data.musicLovers[context.player.id]) activity.todayAudios = Data.musicLovers[context.player.id]
                if(Data.stickermans[context.player.id]) activity.todayStickers = Data.stickermans[context.player.id]
                if(Data.uncultured[context.player.id]) activity.todaySwords = Data.uncultured[context.player.id]
                activity.allMessages = context.player.msgs + activity.todayMessages
                activity.allAudios = context.player.audios + activity.todayAudios
                activity.allStickers = context.player.stickers + activity.todayStickers
                activity.allSwords = context.player.swords + activity.todaySwords
            }
            let request = "‚Üñ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n" +
                "üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: " + activity.allMessages + "\n" +
                "üí© –í—Å–µ–≥–æ —Å—Ç–∏–∫–µ—Ä–æ–≤: " + activity.allStickers + "\n" +
                "üé∂ –í—Å–µ–≥–æ –º—É–∑—ã–∫–∏: " + activity.allAudios + "\n" +
                "ü§¨ –í—Å–µ–≥–æ –º–∞—Ç–æ–≤: " + activity.allSwords + "\n" +
                "‚ö† –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: " + context.player.warningScore + "\n\n" +
                "üí¨ –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: " + activity.todayMessages + "\n" +
                "üí© –°—Ç–∏–∫–µ—Ä–æ–≤ —Å–µ–≥–æ–¥–Ω—è: " + activity.todayStickers + "\n" +
                "üé∂ –ú—É–∑—ã–∫–∏ —Å–µ–≥–æ–¥–Ω—è: " + activity.todayAudios + "\n" +
                "ü§¨ –ú–∞—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: " + activity.todaySwords
            await context.reply(request)
        }
        catch (e)
        {
            await ErrorHandler.SendLogs(context, "ChatController/Divorce", e)
        }
    }

    async Divorce(context)
    {
        try
        {
            if(context.replyPlayers?.length === 0)
            {
                await context.reply("‚ö† –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞")
                return
            }
            if(context.player.marriedID !== context.replyPlayers[0])
            {
                await context.reply("‚ö† –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ.")
                return
            }
            await api.api.messages.send({
                user_id: context.player.marriedID,
                random_id: Math.round(Math.random() * 100000),
                message: `‚ù§Ô∏è‚Äçü©π –ò–≥—Ä–æ–∫ *id${context.player.id}(${context.player.nick}) –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å –±—Ä–∞–∫`,
                keyboard: keyboard.build([[keyboard.acceptCallbackButton({command: "divorce", item: context.player.id}), keyboard.declineCallbackButton({command: "decline_divorce", item: context.player.id})]]).inline().oneTime()
            })
            await context.send(`‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Ö–æ–¥ –∑–∞ *id${context.replyPlayers[0]}(–≤–∞–º–∏), –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –õ–° –∏ –¥–∞–π—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç`)
        }
        catch (e)
        {
            await ErrorHandler.SendLogs(context, "ChatController/Divorce", e)
        }
    }

    async OfferMarry(context)
    {
        try
        {
            if(context.replyPlayers?.length === 0)
            {
                await context.reply("‚ö† –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞")
                return
            }
            if(context.player.isMarried)
            {
                await context.reply("‚ö† –í—ã —É–∂–µ –ø–æ–º–æ–ª–≤–ª–µ–Ω—ã")
                return
            }
            let user = context.replyPlayers[0]
            user = await Player.findOne({where: {id: user}})
            if(!user)
            {
                await context.reply("‚ö† –ò–≥—Ä–æ–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                await context.send(`‚ö† –ê *id${context.replyPlayers[0]}(–≤–∞—Å) —è –ø–æ–ø—Ä–æ—à—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –∏–Ω–∞—á–µ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞`)
                return
            }
            const userInfo = await PlayerInfo.findOne({where: {id: user.dataValues.id}, attributes: ["marriedID"]})
            if(userInfo.dataValues.marriedID !== null)
            {
                await context.send(`‚ö† –≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –±—Ä–∞–∫–µ`)
                return
            }
            if(NameLibrary.GetGender(user.dataValues.gender) === context.player.gender && context.player.nation !== "–ì—Ä–µ–∫ üèõÔ∏è")
            {
                await context.send("‚úù –ú—ã —Ç–∞–∫–æ–µ –Ω–µ –æ–¥–æ–±—Ä—è–µ–º.")
                return
            }
            await api.api.messages.send({
                user_id: user.dataValues.id,
                random_id: Math.round(Math.random() * 100000),
                message: `üíå –ò–≥—Ä–æ–∫ *id${context.player.id}(${context.player.nick}) –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞`,
                keyboard: keyboard.build([[keyboard.acceptCallbackButton({command: "merry", item: context.player.id}), keyboard.declineCallbackButton({command: "decline_merry", item: context.player.id})]]).inline().oneTime()
            })
            Data.users[context.player.id].isMarried = true
            await context.send(`‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Ö–æ–¥ –∑–∞ *id${user.dataValues.id}(–≤–∞–º–∏), –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –õ–° –∏ –¥–∞–π—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç`)
        }
        catch (e)
        {
            await ErrorHandler.SendLogs(context, "ChatController/OfferMarry", e)
        }
    }

    async ToOtherCity(context, id)
    {
        try
        {
            const road = await CityRoads.findOne({where: {fromID: context.player.location, toID: id}})
            if(!road)
            {
                await context.reply("‚ö† –í–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —ç—Ç–∞ –¥–æ—Ä–æ–≥–∞")
                return
            }
            const city = Data.cities[id]
            if(city.isSiege && context.player.status !== "worker")
            {
                await context.reply("‚ö† –ì–æ—Ä–æ–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –æ—Å–∞–¥–æ–π")
                return
            }
            if(Data.countries[context.player.countryID].isSiege && context.player.status !== "worker")
            {
                await context.reply("‚ö† –í —Ñ—Ä–∞–∫—Ü–∏–∏ –≤–≤–µ–¥–µ–Ω–æ –≤–æ–µ–Ω–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º–µ–∂–¥—É –≥–æ—Ä–æ–¥–∞–º–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")
                return
            }
            if(city.isSiege && context.player.status !== "worker")
            {
                await context.reply("‚Ñπ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—Å–∞–¥–µ, –≤—ä–µ–∑–¥ –≤ –Ω–µ–≥–æ –Ω–µ –≤–æ–∑–º–æ–∂–µ–Ω")
                return
            }
            if(context.player.status === "worker")
            {
                await context.reply("üèô –í—ã –ø—Ä–∏—à–ª–∏ –≤ –≥–æ—Ä–æ–¥ " + city.name)
                context.player.location = city.id
                await PlayerStatus.update(
                    {location: city.id},
                    {where: {id: context.player.id}}
                )
            }
            else
            {
                const time = new Date()
                time.setMinutes(time.getMinutes() + parseInt(road.dataValues.time))
                context.player.lastActionTime = time
                context.player.state = SceneController.WaitingWalkMenu
                context.reply("‚Ñπ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ –≥–æ—Ä–æ–¥ " + city.name)
                context.player.timeout = setTimeout(async () => {
                    await api.SendMessageWithKeyboard(context.player.id, "üèô –í—ã –ø—Ä–∏—à–ª–∏ –≤ –≥–æ—Ä–æ–¥ " + city.name + "\n" + city.description, SceneController.GetStartMenuKeyboard(context))
                    context.player.location = city.id
                    context.player.state = SceneController.StartScreen
                    await PlayerStatus.update(
                        {location: city.id},
                        {where: {id: context.player.id}}
                    )
                    if(city.notifications)
                    {
                        await api.SendMessage(city.leaderID, `‚Ñπ –ò–≥—Ä–æ–∫ ${context.player.GetName()} –∑–∞—à–µ–ª –≤ –≥–æ—Ä–æ–¥ ${city.name}`)
                    }
                }, road.dataValues.time * 60000)
            }
        }
        catch (e)
        {
            await ErrorHandler.SendLogs(context, "ChatController/ToOtherCountry", e)
        }
    }

    async ToOtherCountry(context, id)
    {
        try
        {
            const road = await CountryRoads.findOne({where: {fromID: context.player.countryID, toID: id}})
            if(!road)
            {
                await context.reply("‚ö† –í–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —ç—Ç–∞ –¥–æ—Ä–æ–≥–∞")
                return
            }
            const country = Data.countries[id]
            if(!context.player.CanPay({money: -country.entranceFee}))
            {
                await context.reply("‚ö† –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤—Ö–æ–¥–Ω–æ–π –ø–æ—à–ª–∏–Ω—ã")
                return
            }
            if(Data.cities[context.player.location].isSiege)
            {
                await context.reply("‚ö† –ì–æ—Ä–æ–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –æ—Å–∞–¥–æ–π, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –µ–≥–æ –ø–æ–∫–∏–Ω—É—Ç—å")
                return
            }
            if(Data.countries[context.player.countryID].isSiege)
            {
                await context.reply("‚ö† –í —Ñ—Ä–∞–∫—Ü–∏–∏ –≤–≤–µ–¥–µ–Ω–æ –≤–æ–µ–Ω–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ, –≤—ã–µ–∑–¥ –∑–∞–ø—Ä–µ—â–µ–Ω")
                return
            }
            if(Data.countries[id].isSiege)
            {
                await context.reply("‚ö† –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ñ—Ä–∞–∫—Ü–∏—è, –≤ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –±–ª–æ–∫–∞–¥–æ–π, –≤—ä–µ–∑–¥ –≤ –Ω–µ–µ –Ω–µ –≤–æ–∑–º–æ–∂–µ–Ω")
                return
            }
            if(context.player.status === "worker")
            {
                await context.reply("üèô –í—ã –ø—Ä–∏—à–ª–∏ –≤ –≥–æ—Ä–æ–¥ " + Data.GetCityName(country.capitalID))
                context.player.location = country.capitalID
                context.player.countryID = country.id
                await PlayerStatus.update(
                    {location: country.capitalID, countryID: country.id},
                    {where: {id: context.player.id}}
                )
            }
            else
            {
                const time = new Date()
                time.setMinutes(time.getMinutes() + road.dataValues.time)
                context.player.state = SceneController.WaitingWalkMenu
                await context.reply("‚Ñπ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ —Ñ—Ä–∞–∫—Ü–∏—é " + country.GetName())
                context.player.lastActionTime = time
                context.player.timeout = setTimeout(async () => {
                    await api.SendMessageWithKeyboard(context.player.id, "üèô –í—ã –ø—Ä–∏—à–ª–∏ –≤ –≥–æ—Ä–æ–¥ " + Data.GetCityName(country.capitalID), SceneController.GetStartMenuKeyboard(context))
                    context.player.location = country.capitalID
                    context.player.countryID = country.id
                    if (country.entranceFee !== 0)
                    {
                        await Data.AddPlayerResources(context.player.id, {money: -country.entranceFee})
                        await Data.AddCountryResources(country, {money: country.entranceFee})
                    }
                    await PlayerStatus.update(
                        {location: Data.countries[country].capitalID, countryID: Data.countries[country].id},
                        {where: {id: context.player.id}}
                    )
                    if(Data.countries[country].notifications)
                    {
                        await api.SendMessage(Data.countries[country].leaderID, `‚Ñπ –ò–≥—Ä–æ–∫ ${context.player.GetName()} –∑–∞—à–µ–ª –≤ –≤–∞—à—É —Ñ—Ä–∞–∫—Ü–∏—é ${country.GetName()}`)
                    }
                    if(Data.cities[Data.countries[country].capitalID].notifications)
                    {
                        await api.SendMessage(Data.cities[Data.countries[country].capitalID].leaderID, `‚Ñπ –ò–≥—Ä–æ–∫ ${context.player.GetName()} –∑–∞—à–µ–ª –≤ –≥–æ—Ä–æ–¥ ${Data.cities[country.capitalID].name}`)
                    }
                    context.player.state = SceneController.StartScreen
                }, road.dataValues.time * 60000)
            }
        }
        catch (e)
        {
            await ErrorHandler.SendLogs(context, "ChatController/ToOtherCountry", e)
        }
    }


    async RoadMap(context)
    {
        try
        {
            const renderKbString = (array, button) => {
                let kb = []
                const strings = []
                for (let i = 0; i < Math.ceil(array.length / 2); i++)
                {
                    strings.push(array.slice((i * 4), (i * 4) + 4))
                }
                for(let i = 0; i < strings.length; i++)
                {
                    kb[i] = []
                    for(const btn of strings[i])
                    {
                        kb[i].push(button({name: btn[0], type: btn[2], action: btn[1]}))
                    }
                }
                return kb
            }
            let request = `üó∫ –ö–∞—Ä—Ç–∞ –¥–æ—Ä–æ–≥\n\n*id${context.player.id}(–í—ã) –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ ${Data.cities[context.player.location].isCapital ? "—Å—Ç–æ–ª–∏—Ü–µ" : ""} —Ñ—Ä–∞–∫—Ü–∏–∏ ${Data.countries[Data.cities[context.player.location].countryID].GetName()}, –≤ –≥–æ—Ä–æ–¥–µ ${Data.cities[context.player.location].name}\n`
            let kb = []
            let countryKB = []
            let cityKB = []
            const countryRoads = await CountryRoads.findAll({where: {fromID: context.player.countryID, isBlocked: false}, limit: 8, attributes: ["toID", "time"]})
            if(countryRoads.length !== 0) request += "\nüîµ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ —Ñ—Ä–∞–∫—Ü–∏–∏:\n"
            for(const key of countryRoads)
            {
                countryKB.push([Data.countries[key.dataValues.toID].name, "ID" + key.dataValues.toID, "to_other_country"])
                request += `üî∏ ${Data.countries[key.dataValues.toID].GetName()} - ${key.dataValues.time} –º–∏–Ω, –≤—ä–µ–∑–¥–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞ - ${Data.countries[key.dataValues.toID].entranceFee} –º–æ–Ω–µ—Ç\n`
            }
            const cityRoads = await CityRoads.findAll({where: {fromID: context.player.location, isBlocked: false}, limit: 8, attributes: ["toID", "time"]})
            if(cityRoads.length !== 0) request += "\n‚ö™ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å –≥–æ—Ä–æ–¥–∞:\n"
            for(const key of cityRoads)
            {
                cityKB.push([Data.cities[key.dataValues.toID].name, "ID" + key.dataValues.toID, "to_other_city"])
                request += `üî∏ ${Data.cities[key.dataValues.toID].name} - ${key.dataValues.time} –º–∏–Ω\n`
            }
            kb = kb.concat(renderKbString(countryKB, keyboard.lightButton))
            kb = kb.concat(renderKbString(cityKB, keyboard.greyButton))
            await context.send(request, {attachment: Data.variables.roadMap, keyboard: keyboard.build(kb).inline()})
        }
        catch (e)
        {
            await ErrorHandler.SendLogs(context, "ChatController/RoadMap", e)
        }
    }

    async ShowCountriesInfo(context)
    {
        try
        {
            let request = "üî∞ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞, –Ω–∞—Å–µ–ª—è—é—â–∏–µ –Ω–∞—à –º–∏—Ä:\n\n"
            let user = undefined
            let population = 0
            for(const country of Data.countries)
            {
                user = undefined
                if(country)
                {
                    user = await Player.findOne({where: {id: country.leaderID}, attributes: ["nick"]})
                    population = await PlayerStatus.count({where: {citizenship: country.id}})
                    request += `${country.GetName()}\n`
                    request += `üë• –ù–∞—Å–µ–ª–µ–Ω–∏–µ - ${population} —á–µ–ª.\n`
                    request += `üëë –ü—Ä–∞–≤–∏—Ç–µ–ª—å - ${user ? `*id${country.leaderID}(${user.dataValues.nick})` : "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"}\n`
                    request += `üåÜ –°—Ç–æ–ª–∏—Ü–∞ - ${Data.cities[country.capitalID].name}\n\n`
                }
            }
            await context.send(request)
        }
        catch (e)
        {
            await ErrorHandler.SendLogs(context, "ChatController/RoadMap", e)
        }
    }

    async ShowCountriesActive(context)
    {
        try
        {
            let request = "üî∞ –ê–∫—Ç–∏–≤ —Ñ—Ä–∞–∫—Ü–∏–π:\n\n"
            let activeCountries = []
            for(let i = 0; i < Data.countries.length; i++)
            {
                if(Data.countries[i])
                {
                    activeCountries.push([Data.countries[i].active, i])
                }
            }
            activeCountries = activeCountries.sort()
            for(let i = activeCountries.length; i > 0; i--)
            {
                if(activeCountries[i])
                {
                    if(Data.countries[activeCountries[i][1]])
                    {
                        request += `${Data.countries[activeCountries[i][1]].GetName()}\n`
                        request +=  `${Data.countries[activeCountries[i][1]].chatID ? `‚öí –ê–∫—Ç–∏–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${Data.countries[activeCountries[i][1]].active} —Å–æ–æ–±—â–µ–Ω–∏–π` : "‚ö† –ß–∞—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω"}\n`
                        request += `üí™ –ü–æ–ª—É—á–µ–Ω–æ –±–∞–ª–ª–æ–≤: ${Data.countries[activeCountries[i][1]].rating}\n`
                        request += `üî¥ –ü–æ–ª—É—á–µ–Ω–æ –≤–∞—Ä–Ω–æ–≤: ${Data.countries[activeCountries[i][1]].warnings}\n\n`
                    }
                }
            }
            await context.send(request)
        }
        catch (e)
        {
            await ErrorHandler.SendLogs(context, "ChatController/RoadMap", e)
        }
    }

    async AddCountryChat(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) < 4)
            {
                await context.reply("‚ö† –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
                return
            }
            context.command = context.command.replace(/–¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç/, "")
            context.command = context.command.replace(" ", "")
            let country = null
            for(let i = 0; i < Data.countries.length; i++)
            {
                if(Data.countries[i])
                {
                    if(Data.countries[i].chatID === context.peerId)
                    {
                        await context.reply(`‚ö† –≠—Ç–æ—Ç —á–∞—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ—Ä–∞–∫—Ü–∏–µ–π ${Data.countries[i].GetName()}`)
                        return
                    }
                }
            }
            let command = new RegExp(context.command, "i")
            for(let i = 0; i < Data.countries.length; i++)
            {
                if(Data.countries[i])
                {
                    if(Data.countries[i].name.toLowerCase().match(command))
                    {
                        country = Data.countries[i]
                        break
                    }
                }
            }
            if(!country)
            {
                await context.reply("‚ö† –§—Ä–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            }
            country.chatID = context.peerId
            await Country.update({chatID: context.peerId}, {where: {id: country.id}})
            await Data.LoadCountries()
            await context.send(`‚úÖ –ß–∞—Ç ${context.peerId} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.GetName()}`)
        }
        catch (e)
        {
            await ErrorHandler.SendLogs(context, "ChatController/AddCountryChat", e)
        }
    }

    async Reset(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) < 3)
            {
                await context.reply("‚ö† –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
                return
            }
            let user
            if(context.replyPlayers[0])
            {
                user = context.replyPlayers[0]
            }
            else
            {
                user = context.player.id
            }
            if(Data.users[user])
            {
                delete Data.users[user]
                await context.reply("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–æ–∫–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫—ç—à–∞")
            }
            else
            {
                await context.reply("‚ö† –î–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–æ–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –∫—ç—à–µ")
            }
        }
        catch (e)
        {
            await ErrorHandler.SendLogs(context, "ChatController/Reset", e)
        }
    }

    async Work(context)
    {
        try
        {
            const country = Data.countries[context.player.countryID]
            const kb = []
            country.resources.match(/wood/) && kb.push([keyboard.greenButton({name: "üå≥ –õ–µ—Å ü™ì", type: "extract", action: "wood"})])
            country.resources.match(/wheat/) && kb.push([keyboard.greyButton({name: "üåæ –°–æ–±—Ä–∞—Ç—å –∑–µ—Ä–Ω–æ üåæ", type: "extract", action: "wheat"})])
            country.resources.match(/stone/) && kb.push([keyboard.greyButton({name: "ü™® –ö–æ–ø–∞—Ç—å –∫–∞–º–µ–Ω—å ‚õè", type: "extract", action: "stone"})])
            country.resources.match(/iron/) && kb.push([keyboard.lightButton({name: "üåë –î–æ–±—ã—Ç—å –∂–µ–ª–µ–∑–æ ‚õè", type: "extract", action: "iron"})])
            country.resources.match(/copper/) && kb.push([keyboard.lightButton({name: "ü•â –î–æ–±—ã—Ç—å –±—Ä–æ–Ω–∑—ã ‚õè", type: "extract", action: "copper"})])
            country.resources.match(/silver/) && kb.push([keyboard.lightButton({name: "ü•à –î–æ–±—ã—Ç—å —Å–µ—Ä–µ–±—Ä–∞ ‚õè", type: "extract", action: "silver"})])
            await context.send(`üöß –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, *id${context.player.id}(–ø—É—Ç–Ω–∏–∫). –í–∏–∂—É, —Ä–∞–±–æ—Ç–∞—Ç—å —Ö–æ—á–µ—à—å? –ß—Ç–æ-–∂, –µ—Å—Ç—å –¥–ª—è —Ç–µ–±—è –ø–∞—Ä—É –∑–∞–Ω—è—Ç–∏–π...`, {keyboard: keyboard.build(kb).inline()})
        }
        catch (e)
        {
            await ErrorHandler.SendLogs(context, "ChatController/Relax", e)
        }
    }
    async Wakeup(context)
    {
        try
        {
            if(!context.player.isRelaxing)
            {
                await context.reply(`‚òï –ë—É–¥–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –±–æ–¥—Ä—ã–º - —Å–µ—Ä–¥—Ü–µ –ø–æ—Å–∞–¥–∏—Ç–µ.`)
                return
            }
            const now = new Date()
            const time = Math.max(0, Math.round((context.player.relaxingEndTime - now) / 60000))
            context.player.isRelaxing = false
            context.player.fatigue = Math.round(100 - (time * (100 / 360)))
            await context.send(`üí™ –í–∞—à —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ ${context.player.fatigue}%`)
        }
        catch (e)
        {
            await ErrorHandler.SendLogs(context, "ChatController/Relax", e)
        }
    }

    async Relax(context)
    {
        try
        {
            if(context.player.isRelaxing)
            {
                await context.reply(`üí§ –°–æ–Ω –≤–æ —Å–Ω–µ? –ó–≤—É—á–∏—Ç –∫–∞–∫ –∑–∞–≤—è–∑–∫–∞ —Ñ–∏–ª—å–º–∞ "–ù–∞—á–∞–ª–æ"`)
                return
            }
            if(context.player.fatigue === 100)
            {
                await context.reply(`üí™ –í—ã –ø–æ–ª–Ω—ã —Å–∏–ª`)
                return
            }
            const need = (100 - context.player.fatigue) * 3.6
            const time = new Date()
            time.setMinutes(time.getMinutes() + need)
            Data.users[context.player.id].relaxingEndTime = time
            if (Data.users[context.player.id].relaxingEndTimeout)
            {
                clearTimeout(Data.users[context.player.id].relaxingEndTimeout)
            }
            Data.users[context.player.id].relaxingEndTimeout = setTimeout(() => {
                api.SendMessage(context.player.id, "‚òï –í–∞—à–∏ —Å–∏–ª—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                context.player.fatigue = 100
                context.player.isRelaxing = false
            }, need * 60000)
            context.player.isRelaxing = true
            await context.send(`üí§ *id${context.player.id}(–í—ã) –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –æ—Ç–¥—ã—Ö–∞, –¥–æ –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–ª ${NameLibrary.ParseFutureTime(time)}`)
        }
        catch (e)
        {
            await ErrorHandler.SendLogs(context, "ChatController/Relax", e)
        }
    }

    async SendResource(context)
    {
        try
        {
            if(context.replyPlayers?.length === 0)
            {
                await context.reply("‚ö† –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞")
                return
            }
            if(context.replyPlayers[0] === context.player.id)
            {
                await context.reply("‚ùì –ö–∞–∫–æ–π —Å–º—ã—Å–ª –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã —Å–∞–º–æ–º—É —Å–µ–±–µ? –í–æ—Ç –ø—Ä–æ—Å—Ç–æ –∑–∞—á–µ–º? –ß—Ç–æ–±—ã —á—Ç–æ?")
                return
            }
            const user = await Player.findOne({where: {id: context.replyPlayers[0]}})
            if(!user)
            {
                await context.reply("‚ö† –ò–≥—Ä–æ–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                await context.send(`‚ö† –ê *id${context.replyPlayers[0]}(–≤–∞—Å) —è –ø–æ–ø—Ä–æ—à—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –∏–Ω–∞—á–µ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞`)
                return
            }
            context.command = context.command.replace(Commands.send, "")
            let resource = null
            if(context.command.match(Commands.money))
            {
                resource = "money"
                context.command = context.command.replace(Commands.money, "")
            }
            if(context.command.match(Commands.wheat))
            {
                resource = "wheat"
                context.command = context.command.replace(Commands.wheat, "")
            }
            if(context.command.match(Commands.stone))
            {
                resource = "stone"
                context.command = context.command.replace(Commands.stone, "")
            }
            if(context.command.match(Commands.wood))
            {
                resource = "wood"
                context.command = context.command.replace(Commands.wood, "")
            }
            if(context.command.match(Commands.iron))
            {
                resource = "iron"
                context.command = context.command.replace(Commands.iron, "")
            }
            if(context.command.match(Commands.copper))
            {
                resource = "copper"
                context.command = context.command.replace(Commands.copper, "")
            }
            if(context.command.match(Commands.silver))
            {
                resource = "silver"
                context.command = context.command.replace(Commands.silver, "")
            }
            if(context.command.match(Commands.diamond))
            {
                resource = "diamond"
                context.command = context.command.replace(Commands.diamond, "")
            }
            if(!resource)
            {
                await context.reply("‚ö† –£–∫–∞–∂–∏—Ç–µ –∫–∞–∫–æ–π —Ä–µ—Å—É—Ä—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å")
                return
            }
            context.command = context.command.replace(" ", "")
            let count = parseInt(context.command)
            if(isNaN(count))
            {
                await context.reply("‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—É—Ä—Å–∞")
                return
            }
            let obj = {}
            obj[resource] = -Math.abs(count)
            if(!context.player.CanPay(obj))
            {
                await context.reply(`‚ö† –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å ${NameLibrary.GetResourceName(resource)} –±–æ–ª—å—à–µ ${context.player[resource]} —à—Ç.`)
                return
            }
            await Data.AddPlayerResources(context.player.id, obj)
            obj = NameLibrary.ReversePrice(obj)
            await Data.AddPlayerResources(user.dataValues.id, obj)
            await api.SendNotification(user.dataValues.id, `‚úÖ –í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç –∏–≥—Ä–æ–∫–∞ ${context.player.GetName()} –≤ —Ä–∞–∑–º–µ—Ä–µ:\n${NameLibrary.GetPrice(obj)}`)
            await context.reply(`‚úÖ –†–µ—Å—É—Ä—Å –ø–µ—Ä–µ–¥–∞–Ω`)
        }
        catch (e)
        {
            console.log(e)
        }
    }

    async CheckDocs(context)
    {
        try
        {
            if(context.replyPlayers?.length === 0)
            {
                await context.reply("‚ö† –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞")
                return
            }
            let flag = false
            if(Data.countries[context.player.countryID].leaderID === context.player.id)
            {
                flag = true
            }
            if(Data.officials[context.player.countryID])
            {
                if(Data.officials[context.player.countryID][context.player.id])
                {
                    flag = true
                }
            }
            const user = await Player.findOne({where: {id: context.replyPlayers[0]}})
            if(!user)
            {
                await context.reply("‚ö† –ò–≥—Ä–æ–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                await context.send(`‚ö† –ê *id${context.replyPlayers[0]}(–≤–∞—Å) —è –ø–æ–ø—Ä–æ—à—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –∏–Ω–∞—á–µ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞`)
                return
            }
            flag = context.player.countryID === user.dataValues.countryID && flag
            if(!flag && context.player.status !== "worker")
            {
                await context.reply(`‚ö† –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Ñ—Ä–∞–∫—Ü–∏–∏ ${Data.countries[context.player.countryID].GetName()}`)
                return
            }

            const userInfo = await PlayerInfo.findOne({where: {id: context.replyPlayers[0]}})
            const userStatus = await PlayerInfo.findOne({where: {id: context.replyPlayers[0]}})
            await context.reply(`üìå–ò–≥—Ä–æ–∫ *id${user.dataValues.id}(${user.dataValues.nick}):\n\nüìÖ –í–æ–∑—Ä–∞—Å—Ç: ${userInfo.dataValues.age}\n‚ö§ –ü–æ–ª: ${user.dataValues.gender ? "‚ôÇ –ú—É–∂—á–∏–Ω–∞" : "‚ôÄ –ñ–µ–Ω—â–∏–Ω–∞"}\nüç£ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: ${userInfo.dataValues.nationality}\nüíç –ë—Ä–∞–∫: ${userInfo.dataValues.marriedID ? user.dataValues.gender ? `*id${userInfo.dataValues.marriedID}(üíò–ñ–µ–Ω–∞)` : `*id${userInfo.dataValues.marriedID}(üíò–ú—É–∂)` : "–ù–µ—Ç"}\nü™Ñ –†–æ–ª—å: ${NameLibrary.GetRoleName(user.dataValues.role)}\nüëë –°—Ç–∞—Ç—É—Å: ${NameLibrary.GetStatusName(user.dataValues.status)}\nüî∞ –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: ${userStatus.dataValues.citizenship ? Data.GetCountryName(userStatus.dataValues.citizenship) : "–ù–µ—Ç"}\nüìç –ü—Ä–æ–ø–∏—Å–∫–∞: ${userStatus.dataValues.registration ? Data.GetCityName(userStatus.dataValues.registration) : "–ù–µ—Ç"}`)
        }
        catch (e)
        {
            await ErrorHandler.SendLogs(context, "ChatController/CheckLocation", e)
        }
    }

    async CheckLocation(context)
    {
        try
        {
            if(context.replyPlayers?.length === 0)
            {
                await context.reply("‚ö† –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞")
                return
            }
            if(context.replyPlayers[0] === context.player.id)
            {
                await context.reply("‚ûï –î–∞, –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ–¥–Ω–æ–º –≥–æ—Ä–æ–¥–µ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π")
                return
            }
            const user = await PlayerStatus.findOne({where: {id: context.replyPlayers[0]}})
            if(!user)
            {
                await context.reply("‚ö† –ò–≥—Ä–æ–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                await context.send(`‚ö† –ê *id${context.replyPlayers[0]}(–≤–∞—Å) —è –ø–æ–ø—Ä–æ—à—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –∏–Ω–∞—á–µ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞`)
                return
            }
            if(user.dataValues.location === context.player.location)
            {
                await context.reply("‚ûï –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ–¥–Ω–æ–º –≥–æ—Ä–æ–¥–µ")
            }
            else
            {
                if(user.dataValues.countryID === context.player.countryID)
                {
                    await context.reply("‚ûñ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö –æ–¥–Ω–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏")
                }
                else
                {
                    await context.reply("‚ûñ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö")
                }
            }
        }
        catch (e)
        {
            await ErrorHandler.SendLogs(context, "ChatController/CheckLocation", e)
        }
    }

    async ExtractResource(context, resource)
    {
        try
        {
            if(context.player.CantExtraction())
            {
                await context.reply(`ü•¥ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±—ã–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã, ${context.player.WhyCantTransact()}`)
                return
            }
            if(context.player.fatigue <= 0)
            {
                await context.reply("üò¢ –•–≤–∞—Ç–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –∏–¥–∏ –ø–æ—Å–ø–∏.")
                return
            }
            if(Data.countries[context.player.countryID].resources.match(resource))
            {
                const extract = {
                    wood: {min: 2.5, max: 5, img: "photo565472458_457240621_da59ab56e0b4759369"},
                    wheat: {min: 2.5, max: 7.5, img: "photo565472458_457240622_c245972e88cb05d4ec"},
                    stone: {min: 2.5, max: 5, img: "photo565472458_457240628_68cde51b5783682f79"},
                    iron: {min: 0.65, max: 1.85, img: "photo565472458_457240629_1c30668d6937ddbc82"},
                    copper: {min: 0.65, max: 1.85, img: "photo565472458_457240627_0163551e74f37a1633"},
                    silver: {min: 1.25, max: 2.5, img: "photo565472458_457240630_020e0b0f3eaee322a7"}
                }
                const extraction = NameLibrary.GetRandomNumb(extract[resource].min * context.player.fatigue, extract[resource].max * context.player.fatigue)
                context.player.fatigue = context.player.HasEffect("industriousness") ? Math.max(0, context.player.fatigue - 50) : 0
                let diamonds = 0
                if(NameLibrary.GetChance(0.1 * (context.player.HasEffect("luck") ? 2 : 1)))
                {
                    diamonds = 1
                    await context.reply(`üíé –í—ã –Ω–∞—à–ª–∏ –∞–ª–º–∞–∑!`)
                }
                let obj = {
                    diamonds: diamonds
                }
                obj[resource] = extraction
                await Data.AddPlayerResources(context.player.id, obj)
                await context.send(`‚úÖ –í—ã –¥–æ–±—ã–ª–∏ ${NameLibrary.GetResourceName(resource)} ${extraction}`, {attachment: extract[resource].img})
            }
            else
            {
                await context.reply("ü•∏ –ú–µ—Å—Ç–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å, –Ω–µ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç —ç—Ç–∏–º —Ä–µ—Å—É—Ä—Å–æ–º.")
            }
        }
        catch (e)
        {
            await ErrorHandler.SendLogs(context, "ChatController/ExtractResource", e)
        }
    }

    async LocationRequest(context)
    {
        try
        {
            const country = Data.countries[context.player.countryID]
            const kb = [[], [], []]
            country.resources.match(/wood/) && kb[0].push(keyboard.greenButton({name: "üå≥ –õ–µ—Å ü™ì", type: "extract", action: "wood"}))
            country.resources.match(/wheat/) && kb[0].push(keyboard.greyButton({name: "üåæ –°–æ–±—Ä–∞—Ç—å –∑–µ—Ä–Ω–æ üåæ", type: "extract", action: "wheat"}))
            country.resources.match(/stone/) && kb[1].push(keyboard.greyButton({name: "ü™® –ö–æ–ø–∞—Ç—å –∫–∞–º–µ–Ω—å ‚õè", type: "extract", action: "stone"}))
            country.resources.match(/iron/) && kb[1].push(keyboard.lightButton({name: "üåë –î–æ–±—ã—Ç—å –∂–µ–ª–µ–∑–æ ‚õè", type: "extract", action: "iron"}))
            country.resources.match(/copper/) && kb[2].push(keyboard.lightButton({name: "ü•â –î–æ–±—ã—Ç—å –±—Ä–æ–Ω–∑—ã ‚õè", type: "extract", action: "copper"}))
            country.resources.match(/silver/) && kb[2].push(keyboard.lightButton({name: "ü•à –î–æ–±—ã—Ç—å —Å–µ—Ä–µ–±—Ä–∞ ‚õè", type: "extract", action: "silver"}))
            const photo = Data.cities[context.player.location].photoURL || country.photoURL
            await context.send(`üß≠ *id${context.player.id}(–í—ã) –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ ${Data.cities[context.player.location].isCapital ? "—Å—Ç–æ–ª–∏—Ü–µ" : ""} —Ñ—Ä–∞–∫—Ü–∏–∏ ${country.GetName()}, –≤ –≥–æ—Ä–æ–¥–µ ${Data.cities[context.player.location].name}\n\n${Data.cities[context.player.location].description}`,
                {
                    attachment: photo,
                    keyboard: keyboard.build(kb).inline()
                })
        }
        catch (e)
        {
            await ErrorHandler.SendLogs(context, "ChatController/LocationRequest", e)
        }
    }

    async SendWarningForm(context)
    {
        try
        {
            if(context.replyPlayers?.length === 0)
            {
                await context.reply("‚ö† –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–æ–≤")
                return
            }
            let time = new Date()
            if(context.player.lastReportTime)
            {
                if(time - context.player.lastReportTime < 3600000 && NameLibrary.RoleEstimator(context.player.role) < 3)
                {
                    await context.reply("‚ö† –í—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Ä–µ–ø–æ—Ä—Ç—ã")
                    return
                }
            }
            if(NameLibrary.RoleEstimator(context.player.role) === 0)
            {
                await this.SendReport(context)
                return
            }
            let adminsFlag = false
            let unregFlag = false
            let temp = null
            for(const i of context.replyPlayers)
            {
                if(Data.users[i])
                {
                    if(NameLibrary.RoleEstimator(Data.users[i].role) >= NameLibrary.RoleEstimator(context.player.role))
                    {
                        adminsFlag = true
                    }
                }
                else
                {
                    temp = await Player.findOne({where: {id: i}})?.dataValues
                    if(temp)
                    {
                        if(NameLibrary.RoleEstimator(temp.role) >= NameLibrary.RoleEstimator(context.player.role))
                        {
                            adminsFlag = true
                        }
                    }
                    else
                    {
                        unregFlag = true
                    }
                }
            }
            if(adminsFlag)
            {
                await context.reply("‚ö† –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ –≤—ã–¥–∞–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º")
                return
            }
            if(unregFlag)
            {
                await context.reply("‚ö† –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                return
            }
            const users = context.replyPlayers.join(";")
            context.player.lastReportTime = time
            await api.SendMessageWithKeyboard(context.player.id, `–í—ã –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.\n\n‚Ñπ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ù–∞—á–∞—Ç—å\" —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ—Ä—Ç–∞ –Ω–∞ –∏–≥—Ä–æ–∫–æ–≤:\n${context.replyPlayers?.map(user => {
                return `*id${user}(${user})\n`
            })}`, [[keyboard.startButton({type: "new_warning", users: users})]])
            context.player.state = SceneController.FillingOutTheForm
            await context.reply("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –≤ –õ–°")
        }
        catch (e)
        {
            await ErrorHandler.SendLogs(context, "ChatController/SendWarningForm", e)
        }
    }

    async SendReport(context)
    {
        try
        {
            if(context.replyPlayers?.length === 0)
            {
                await context.reply("‚ö† –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–æ–≤")
                return
            }
            let time = new Date()
            if(context.player.lastReportTime)
            {
                if(time - context.player.lastReportTime < 3600000)
                {
                    await context.reply("‚ö† –í—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∂–∞–ª–æ–±—ã")
                    return
                }
            }
            const users = context.replyPlayers.join(";")
            context.player.lastReportTime = time
            await api.SendMessageWithKeyboard(context.player.id, `–í—ã –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.\n\n‚Ñπ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ù–∞—á–∞—Ç—å\" —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ—Ä—Ç–∞ –Ω–∞ –∏–≥—Ä–æ–∫${context.replyPlayers.length > 1 ? "–æ–≤" : "–∞"}:\n${context.replyPlayers?.map(user => {
                return `*id${user}(${user})\n`
            })}`, [[keyboard.startButton({type: "new_report", users: users})]])
            context.player.state = SceneController.FillingOutTheForm
            await context.reply("‚Ñπ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –≤ –õ–°")
        }
        catch (e)
        {
            await ErrorHandler.SendLogs(context, "ChatController/SendWarningForm", e)
        }
    }

    async SendBanForm(context)
    {
        try
        {
            if(NameLibrary.RoleEstimator(context.player.role) < 3)
            {
                await context.reply("‚ö† –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
                return
            }
            if(context.replyPlayers?.length === 0)
            {
                await context.reply("‚ö† –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–æ–≤")
                return
            }
            let time = new Date()
            if(context.player.lastReportTime)
            {
                if(time - context.player.lastReportTime < 3600000 && NameLibrary.RoleEstimator(context.player.role) < 4)
                {
                    await context.reply("‚ö† –í—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Ä–µ–ø–æ—Ä—Ç—ã")
                    return
                }
            }
            let adminsFlag = false
            let unregFlag = false
            let temp = null
            const users = context.replyPlayers[0]
            if(Data.users[users])
            {
                if(NameLibrary.RoleEstimator(Data.users[users].role) >= NameLibrary.RoleEstimator(context.player.role))
                {
                    adminsFlag = true
                }
            }
            else
            {
                temp = await Player.findOne({where: {id: users}})
                if(temp)
                {
                    if(NameLibrary.RoleEstimator(temp.dataValues.role) >= NameLibrary.RoleEstimator(context.player.role))
                    {
                        adminsFlag = true
                    }
                }
                else
                {
                    unregFlag = true
                }
            }
            if(adminsFlag)
            {
                await context.reply("‚ö† –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–¥–∞–≤–∞—Ç—å –±–∞–Ω—ã –∞–¥–º–∏–Ω–∞–º")
                return
            }
            if(unregFlag)
            {
                await context.reply("‚ö† –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–¥–∞—Ç—å –±–∞–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                return
            }
            context.player.lastReportTime = time
            await api.SendMessageWithKeyboard(context.player.id, `–í—ã –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.\n\n‚Ñπ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ù–∞—á–∞—Ç—å\" —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ì–ª–æ–ë–∞–Ω–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞: ${context.replyPlayers?.map(user => {
                return `*id${user}(${user})\n`
            })}`, [[keyboard.startButton({type: "new_ban", users: users})], keyboard.backButton])
            context.player.state = SceneController.FillingOutTheForm
            await context.reply("‚Ñπ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –≤ –õ–°")
        }
        catch (e)
        {
            await ErrorHandler.SendLogs(context, "ChatController/SendBanForm", e)
        }
    }
}

module.exports = new ChatController()